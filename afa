#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>

typedef struct {
    pthread_mutex_t mutex; //  mutex kilidi
    int tamammi;            // kontrol degiskeni
    pthread_cond_t cond;     // kosul degiskeni
    char *dosyaadi;          // dosya ismi
} thread_data_t;

// thread fonksiyonu
void *fonksiyon(thread_data_t *data) {
    // kilitleyen fonksiyon
    pthread_mutex_lock(&data->mutex);            

    printf("%s'nin islemi basliyor\n", data->dosyaadi);

    // dosya olusturan fonksiyon
    FILE *dosya = fopen(data->dosyaadi, "r");
    if (dosya == NULL) {
        perror("thread: dosya acilamadi");
        data->tamammi = -1;
        pthread_cond_signal(&data->cond);
        pthread_mutex_unlock(&data->mutex);
        return NULL;
    }

    // dosyayi okuyan ve ekrana yazdiran fonksiyon
    printf("thread: dosya icerigi:\nKeremin kodu\n");
    char buffer[256];
    while (fgets(buffer, sizeof(buffer), dosya)) {
        printf("%s", buffer);
    }
    fclose(dosya);

    // islemin tamamlandigini belirten fonksiyon
    data->tamammi = 1;                       
    pthread_cond_signal(&data->cond);
    pthread_mutex_unlock(&data->mutex);          

    return NULL;                                 
}

int main() {
    thread_data_t data;
    struct timespec ts;
    pthread_t thread;
    int kontrol;

    // veri baslatan fonksiyon
    pthread_mutex_init(&data.mutex, NULL);
    pthread_cond_init(&data.cond, NULL);
    data.tamammi = 0;
    data.dosyaadi = "ornek_dosya.txt";

    // dosya olusturma
    FILE *dosya = fopen(data.dosyaadi, "w");
    if (dosya == NULL) {
        perror("dosya olusturulamadi");
        return 1;
    }
    fprintf(dosya, "örnek dosya icerigi\n");
    fprintf(dosya, "dosyabasarili sekilde calisiyor\n");
    fclose(dosya);

    // threadi baslatan fonksiyon
    pthread_create(&thread, NULL, (void *(*)(void *))fonksiyon, &data);

    // zamani hesaplayan fonksiyon
    clock_gettime(CLOCK_REALTIME, &ts);  // su anki zamani al
    ts.tv_sec += 3;            // Timeout süresini ekle

    // threadin tamamlanmasini bekleyen fonksiyon
    pthread_mutex_lock(&data.mutex);
    while (!data.tamammi) {
        kontrol = pthread_cond_timedwait(&data.cond, &data.mutex, &ts);
        if (kontrol != 0) {
            printf("islem zaman asimina ugradi\n");
            break;
        }
    }
    pthread_mutex_unlock(&data.mutex);

    if (data.tamammi) {
        printf("islem basarili\n");
    } else {
        printf("islem basarisiz\n");
    }

    // kaynaklari temizleyen fonksiyonlar
 
    pthread_mutex_destroy(&data.mutex);
    pthread_join(thread, NULL);
    pthread_cond_destroy(&data.cond);

    return 0;
}
